import { fetchAIResponse } from './client';
import { AIPayload } from './payload';
import { CanvasTacticPack, CanvasPrimitive, CanvasTeam, CanvasPrimitiveType } from '../../types/canvas';


interface TacticalStep {
  timestamp: number; // milliseconds from start
  type: 'move' | 'pass' | 'pressure' | 'intercept';
  actor: {
    team: 'blue' | 'red';
    position?: { x: number; y: number }; // normalized 0-1
    role?: string;
  };
  target?: {
    position: { x: number; y: number }; // normalized 0-1
    team?: 'blue' | 'red';
  };
  description: string;
}

export interface TacticalSequence {
  title: string;
  description: string;
  duration: number; // total duration in ms
  steps: TacticalStep[];
  questions?: string[]; // AI questions for clarification
}

export async function generateTacticalSequence(description: string): Promise<TacticalSequence> {
  const prompt = `Eres un entrenador de f√∫tbol experto. Convierte esta descripci√≥n t√°ctica en una secuencia animada realista.

DESCRIPCI√ìN: "${description}"

CONTEXTO DE CAMPO:
- Campo 105m x 68m, coordenadas 0-1 (equipo azul ataca hacia la derecha, equipo rojo hacia la izquierda)
- X=0 es l√≠nea de fondo izquierda (porter√≠a azul), X=1 es l√≠nea de fondo derecha (porter√≠a roja)
- Y=0 es banda inferior, Y=1 es banda superior

POSICIONES T√çPICAS:
- Defensas: X=0.15-0.25 (azul), X=0.75-0.85 (rojo)
- Mediocampistas: X=0.35-0.65 
- Delanteros: X=0.65-0.85 (azul), X=0.15-0.35 (rojo)

INSTRUCCIONES:
1. Crea una secuencia t√°ctica realista con 5-8 pasos m√°ximo
2. Usa coordenadas espec√≠ficas basadas en posiciones reales de f√∫tbol
3. Timestamps progresivos (0ms, 1000ms, 2000ms, etc.)
4. Movimientos coordinados entre jugadores del mismo equipo
5. Si la descripci√≥n es vaga, haz preguntas espec√≠ficas

FORMATO JSON:
{
  "title": "T√≠tulo breve",
  "description": "Descripci√≥n t√°ctica",
  "duration": 6000,
  "steps": [
    {
      "timestamp": 0,
      "type": "move|pressure|pass|intercept",
      "actor": {
        "team": "blue|red",
        "position": {"x": 0.2, "y": 0.4},
        "role": "central|lateral|delantero|mediocampista"
      },
      "target": {
        "position": {"x": 0.4, "y": 0.5}
      },
      "description": "Acci√≥n espec√≠fica"
    }
  ],
  "questions": ["¬øPregunta espec√≠fica?"]
}

Para PRESI√ìN ALTA espec√≠ficamente:
- Delanteros del equipo presionante avanzan hacia defensas rivales
- Coordinaci√≥n entre 2-3 jugadores presionantes
- Movimientos desde posiciones iniciales hacia el √°rea rival
- Reducir espacios y forzar errores

Responde SOLO JSON v√°lido:`;

  const payload: Partial<AIPayload> = {
    prompt,
    boardState: {
      tokens: [],
      arrows: [],
      trajectories: []
    }
  };

  const response = await fetchAIResponse(payload);
  
  // Debug logging
  console.log('üîç AI Response raw:', response);
  console.log('üîç AI Response content type:', typeof response?.content);
  console.log('üîç AI Response content:', response?.content);
  
  if (!response) {
    throw new Error('La IA no devolvi√≥ ninguna respuesta.');
  }
  
  if (!response.content) {
    console.error('‚ùå Response object:', response);
    throw new Error('La IA no devolvi√≥ contenido. Respuesta recibida: ' + JSON.stringify(response));
  }
  
  let sequence;
  try {
    console.log('üîç Intentando parsear JSON:', response.content);
    sequence = JSON.parse(response.content);
    console.log('‚úÖ JSON parseado exitosamente:', sequence);
  } catch (error) {
    console.error('‚ùå Error parsing JSON:', error);
    console.error('‚ùå Content that failed to parse:', response.content);
    throw new Error('La IA devolvi√≥ JSON inv√°lido: ' + (error instanceof Error ? error.message : 'Error desconocido'));
  }
  
  // Validate sequence structure
  console.log('üîç Validando estructura de secuencia...');
  console.log('- title:', sequence?.title);
  console.log('- steps:', sequence?.steps);
  console.log('- questions:', sequence?.questions);
  
  if (!sequence.title) {
    throw new Error('La secuencia no tiene t√≠tulo. Estructura recibida: ' + JSON.stringify(sequence));
  }
  
  if (!sequence.steps && !sequence.questions) {
    throw new Error('La secuencia no tiene pasos ni preguntas. Estructura recibida: ' + JSON.stringify(sequence));
  }
  
  if (sequence.steps && !Array.isArray(sequence.steps)) {
    throw new Error('Los pasos de la secuencia no son un array v√°lido.');
  }
  
  console.log('‚úÖ Secuencia validada exitosamente');
  return sequence as TacticalSequence;
}

export function convertSequenceToCanvasPack(sequence: TacticalSequence): CanvasTacticPack {
  const primitives: CanvasPrimitive[] = sequence.steps.map((step, index) => {
    const id = `step_${index}`;
    
    if (step.type === 'pass') {
      return {
        id,
        tipo: 'arrow' as CanvasPrimitiveType,
        equipo: (step.actor.team === 'blue' ? 'propio' : 'rival') as CanvasTeam,
        puntos: [
          step.actor.position || { x: 0.5, y: 0.5 },
          step.target?.position || { x: 0.6, y: 0.5 }
        ],
        tiempo: step.timestamp,
        targets: []
      };
    } else {
      return {
        id,
        tipo: 'move' as CanvasPrimitiveType,
        equipo: (step.actor.team === 'blue' ? 'propio' : 'rival') as CanvasTeam,
        puntos: [
          step.actor.position || { x: 0.5, y: 0.5 },
          step.target?.position || { x: 0.6, y: 0.5 }
        ],
        tiempo: step.timestamp,
        targets: []
      };
    }
  });

  // Add marker positions from initial positions
  const markerPositions = new Set<string>();
  sequence.steps.forEach(step => {
    if (step.actor.position) {
      const key = `${step.actor.team}_${step.actor.position.x}_${step.actor.position.y}`;
      if (!markerPositions.has(key)) {
        markerPositions.add(key);
        primitives.push({
          id: `marker_${primitives.length}`,
          tipo: 'marker' as CanvasPrimitiveType,
          equipo: (step.actor.team === 'blue' ? 'propio' : 'rival') as CanvasTeam,
          puntos: [step.actor.position],
          tiempo: 0,
          targets: []
        });
      }
    }
  });

  return {
    titulo: sequence.title,
    instrucciones: [sequence.description],
    primitivas: primitives
  };
}